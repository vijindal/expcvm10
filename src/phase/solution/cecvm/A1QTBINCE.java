/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package phase.solution.cecvm;

import utils.io.Print;
import java.io.FileNotFoundException;
import java.io.IOException;

/**
 *
 * @author metallurgy
 */
public class A1QTBINCE extends FCCQTBINCE {

    //Highest symmetry phase information
//    private int tcdis_local;
//    private int nxcdis_local;
//    private int ncdis_local;
//    private int[] rcdis_local;
//    private int[][] mCoeffInmkb_local;
    private double[] kbdis_local = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, -3, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, -1, -4, 8};
//Phase specific information
    private String phaseTag_local = "A1QTBINCE";
    private int lc_local[] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
    private int tc_local = 82;
    private int nxc_local = 1;
    private int nc_local = 81;
    private int lcf_local[] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
    private int tcf_local = 82;
    private int nxcf_local = 1;
    private int ncf_local = 81;
    private int rcf_local[][] = {{9}, {8}, {8}, {8}, {7}, {7}, {7}, {7}, {7}, {7}, {7}, {7}, {6},
    {6}, {6}, {6}, {6}, {6}, {6}, {6}, {6}, {6}, {6}, {6}, {6}, {6}, {6},
    {6}, {5}, {5}, {5}, {5}, {5}, {5}, {5}, {5}, {5}, {5}, {5}, {5}, {5},
    {5}, {5}, {5}, {5}, {5}, {5}, {5}, {5}, {4}, {4}, {4}, {4}, {4}, {4},
    {4}, {4}, {4}, {4}, {4}, {4}, {4}, {4}, {4}, {4}, {4}, {4}, {4}, {3},
    {3}, {3}, {3}, {3}, {3}, {3}, {3}, {3}, {2}, {2}, {2}, {2}, {1}, {0}};
    private double m_local[][] = {{1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}};
    private int wcv_local[][][] = {{{1, 4, 4, 8, 4, 4, 4, 4, 8, 8, 8, 8, 1, 4, 4, 8, 4, 4, 4, 4, 8, 8,
        8, 8, 2, 8, 4, 8, 4, 4, 2, 8, 4, 8, 4, 4, 2, 4, 8, 8, 4, 4, 2, 4,
        8, 8, 4, 4, 4, 4, 8, 8, 4, 8, 4, 8, 8, 4, 8, 8, 8, 4, 4, 8, 8, 4,
        8, 4, 8, 8, 4, 8, 8, 8, 1, 4, 4, 4, 1, 4, 4, 4, 4, 8, 2, 4, 4, 8,
        2, 4, 1, 4, 4, 1, 4, 4, 2, 4, 2, 4, 1, 1}}, {{1, 4, 4, 8, 4, 4, 4,
        4, 8, 8, 8, 8, 2, 8, 4, 8, 4, 4, 2, 4, 8, 8, 4, 4, 4, 4, 8, 8, 4,
        8, 4, 8, 8, 4, 8, 8, 8, 1, 4, 4, 4, 4, 8, 2, 4, 1, 4, 4, 2, 4,
        1}}, {{1, 2, 1, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 1, 1,
        2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2,
        1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 1, 1, 2, 2, 2, 2, 2, 2,
        2, 2, 1, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1}}, {{1, 1, 2, 2, 2, 2, 2,
        2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 1, 1, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2,
        2, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 1, 1, 1,
        1, 2, 2, 1, 1}}, {{1, 4, 2, 2, 4, 4, 4, 1, 4, 2, 2, 4, 4, 4, 1, 4,
        2, 1, 4, 2, 2, 2, 4, 2, 4, 4, 2, 2, 4, 2, 4, 4, 2, 4, 2, 2, 4, 2,
        4, 2, 2, 4, 1, 2, 1, 2, 1, 1}}, {{1, 2, 1, 2, 1, 1, 2, 2, 2, 2, 2,
        2, 2, 2, 1, 2, 1, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1,
        2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 1, 1}}, {{1, 1, 2, 2,
        2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2,
        2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2,
        1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1,
        2, 2, 1, 1, 1, 1, 2, 2, 1, 1}}, {{1, 4, 2, 4, 2, 4, 4, 1, 4, 2, 4,
        2, 4, 4, 2, 2, 2, 4, 4, 4, 2, 2, 2, 4, 4, 4, 1, 4, 2, 1, 4, 2, 2,
        2, 4, 2, 4, 2, 2, 4, 2, 4, 1, 2, 1, 2, 1, 1}}, {{1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}}, {{1, 1, 2, 2, 2, 2, 2, 2, 1,
        1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1,
        1, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1,
        1, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 1, 1}}, {{1, 2,
        1, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 1, 1, 2, 2, 2, 2,
        2, 2, 2, 2, 1, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1,
        2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2,
        1, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1}}, {{1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1}}, {{1, 4, 2, 2, 4, 4, 4, 1, 4, 2, 2, 2,
        4, 2, 4, 4, 2, 4, 2, 2, 4, 1, 2, 1}}, {{1, 2, 1, 2, 1, 1, 1, 2, 1,
        2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1,
        2, 1, 1, 1, 2, 1, 2, 1, 1}}, {{1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2,
        2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2,
        1, 1, 2, 2, 1, 1}}, {{1, 1, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1,
        1, 1, 1}}, {{1, 4, 2, 4, 2, 4, 4, 2, 2, 2, 4, 4, 4, 1, 4, 2, 2, 2,
        4, 2, 4, 1, 2, 1}}, {{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1}}, {{1, 2, 1, 2, 2, 2, 2, 1, 2, 1, 2, 2, 2, 2, 1, 2,
        1, 1, 2, 1, 1, 2, 1, 2, 2, 2, 2, 1, 2, 1, 2, 2, 2, 2, 1, 2, 1, 1,
        2, 1}}, {{1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 1,
        1}}, {{1, 2, 1, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 1, 1,
        1, 2, 1, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 1, 1}}, {{1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}}, {{1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}}, {{1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2,
        1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}}, {{1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}}, {{1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}}, {{1, 1, 2, 2, 2, 2, 2, 2, 1, 1,
        2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2,
        1, 1, 1, 1, 2, 2, 1, 1}}, {{1, 4, 2, 8, 2, 4, 2, 4, 2, 4, 4, 8, 1,
        4, 2, 2, 2, 4, 1, 2, 1}}, {{1, 4, 4, 1, 4, 4, 2, 4, 2, 4, 1,
        1}}, {{1, 2, 1, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 1,
        1}}, {{1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 1,
        1}}, {{1, 4, 4, 1, 4, 4, 2, 4, 2, 4, 1, 1}}, {{1, 2, 1, 2, 2, 2, 2,
        1, 2, 1, 1, 2, 1, 2, 2, 2, 2, 1, 2, 1}}, {{1, 1, 2, 2, 1, 1, 2, 2,
        2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 1, 1}}, {{1, 2, 2, 2, 1, 2, 2, 2, 2,
        1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 1}}, {{1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1}}, {{1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1,
        1, 1, 1, 1}}, {{1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 1, 1, 1}}, {{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}}, {{1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1}}, {{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}}, {{1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1}}, {{1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1,
        1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}}, {{1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1}}, {{1, 2, 2, 2, 1, 2, 2, 1, 2, 2, 2, 1, 2, 2, 1, 2,
        1, 1, 2, 1}}, {{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}}, {{1, 1, 2, 2, 2, 2,
        2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 1, 1}}, {{1, 4, 1, 4, 2, 2, 2,
        2, 2, 4, 2, 4, 1, 1}}, {{1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1,
        2, 2, 1, 1, 1, 1, 1, 1, 1, 1}}, {{1, 4, 4, 2, 4, 1}}, {{1, 4, 4, 2,
        4, 1}}, {{1, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1}}, {{1, 2, 1, 2, 1,
        2, 1, 2, 1, 1, 1, 1}}, {{1, 2, 2, 2, 2, 1, 2, 1, 2, 1}}, {{1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}}, {{1, 2, 1, 2, 1, 2, 1, 2,
        1, 1, 1, 1}}, {{1, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1}}, {{1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}}, {{1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1}}, {{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1}}, {{1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 1, 1}}, {{1, 2, 2, 2, 1,
        2, 2, 1, 2, 1}}, {{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1}}, {{1, 4, 2, 2, 2, 4, 1}}, {{1, 2, 2, 4, 1, 2, 1, 2, 1}}, {{1,
        4, 6, 4, 1}}, {{1, 2, 2, 4, 1, 2, 1, 2, 1}}, {{1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1}}, {{1, 2, 1, 1, 2, 1}}, {{1, 2, 1, 2,
        1, 1}}, {{1, 2, 1, 2, 1, 1}}, {{1, 1, 1, 1, 1, 1, 1, 1}}, {{1, 1,
        2, 2, 1, 1}}, {{1, 1, 2, 2, 1, 1}}, {{1, 1, 1, 1, 1, 1, 1,
        1}}, {{1, 3, 3, 1}}, {{1, 2, 1, 2, 1, 1}}, {{1, 2, 1}}, {{1, 2,
        1}}, {{1, 2, 1}}, {{1, 2, 1}}, {{1, 1}}};
    private int[][] lcv_local = {{102}, {51}, {144}, {144}, {48}, {72}, {80}, {48}, {128}, {72}, 
{80}, {128}, {24}, {40}, {40}, {40}, {24}, {64}, {40}, {40}, {40}, 
{64}, {64}, {60}, {64}, {64}, {40}, {21}, {12}, {20}, {20}, {12}, 
{20}, {20}, {20}, {32}, {24}, {24}, {32}, {32}, {32}, {32}, {30}, 
{32}, {20}, {32}, {20}, {14}, {24}, {6}, {6}, {12}, {12}, {10}, {16}, 
{12}, {12}, {16}, {16}, {16}, {12}, {10}, {16}, {7}, {9}, {5}, {9}, 
{16}, {6}, {6}, {6}, {8}, {6}, {6}, {8}, {4}, {6}, {3}, {3}, {3}, 
{3}, {2}};
    private int np_local = 162;
    // Arrays to initialize with phase specific size
    private double[] Scu_local = new double[(tcf_local - nxcf_local)];
    private double[] Hcu_local = new double[(tcf_local - nxcf_local)];
    private double[] Gcu_local = new double[(tcf_local - nxcf_local)];
    private double[][] Scuu_local = new double[(tcf_local - nxcf_local)][(tcf_local - nxcf_local)];
    private double[][] Gcuu_local = new double[(tcf_local - nxcf_local)][(tcf_local - nxcf_local)];
    //private double utc[] = new double[lcf_local[tcdis_local - 1]];

    public A1QTBINCE(String stdst[], double edis[], String eMatFile, double mdis[], double T_in, double xB_in) throws FileNotFoundException, IOException { // Constructor Method
        Print.f("*****A1mQTBINCE constructor type 1 called", 6);
        setEmat(eMatFile);//vj-15-03-11
        //Highest symmetry phase information
        //setKbdis(kbdis_local);
        // Phase specific information
        setPhaseTag(phaseTag_local);
        setLc(lc_local);//List of clusters in case of broken symemtry(Ordered phases)per highest symmetry(disordred phase)cluster
        setTc(tc_local);
        setNxc(nxc_local);
        setNc(nc_local);
        setRcf(rcf_local);
        setLcf(lcf_local);
        setTcf(tcf_local);
        setNxcf(nxcf_local);
        setNcf(ncf_local);
        setM(m_local);
        setWcv(wcv_local);
        setLcv(lcv_local);
        setCMat("src/phase/TransMat/cmatA1mQTBIN.txt");
        // Parameters
        setNP(np_local);
        //setR(((Math.abs(edis[0]) == 1) ? 1 : 8.3144)); //  Universal gas constant
        setR(8.3144); //  Universal gas constant//vj-2014-11-26
        setEdis(edis);
        setMdis(mdis, kbdis_local);
        setReferenceStateParameters(stdst);
        setT(T_in);
        setX(xB_in);
        updateStdst();
        //Microscopic Parameters
        genInitialValues(xB_in);//set u and update cluster variables as well
        // Initialize Arrays with phase specific size
        initScu(Scu_local);
        initHcu(Hcu_local);
        initGcu(Gcu_local);
        initScuu(Scuu_local);
        initGcuu(Gcuu_local);
        Print.f("****A1mQTBINCE constructor type 1 ended", 6);
    }

    private void genInitialValues(double x) throws IOException {//Phase specific method
        double[] u_In = new double[(tcf_local)];
        for (int icf = 0; icf < (tcf_local - 1); icf++) {
            u_In[icf] = Math.pow((2 * x - 1), rcf_local[icf][0]);
            //System.out.print(u_In[icf] + " g ");
        }
        u_In[tcf_local - 1] = x;
        setU(u_In);
    }

    @Override
    public double[] getURand() {//Phase specific method
        double x = getXB();
        double[] u_In = new double[(tcf_local)];
        for (int icf = 0; icf < (tcf_local - nxcf_local); icf++) {
            u_In[icf] = Math.pow((2 * x - 1), rcf_local[icf][0]);
            //System.out.print(u_In[icf] + " g ");
        }
        u_In[tcf_local - 1] = x;
        return (u_In);
    }
}
